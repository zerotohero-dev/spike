#    \\ SPIKE: Keep your secrets secret with SPIFFE.
#  \\\\\ Copyright 2024-present SPIKE contributors.
# \\\\\\\ SPDX-License-Identifier: Apache-2.0
#
#  About: This is where we keep track of our work log. Priority order is
#         line number order. The topmost items will likely be done first.

- Low-Hanging Fruits
  - Read ARCHITECTURE.md and create ADRs off of it.
  - Use docsify and github pages redirection for docs (https://docsifyjs.org)
  - ADR: do not store session tokens in db. If SPIKE Nexus crashes, all sessions are gone.
  - ticker := time.NewTicker(10 * time.Second) // for now; will be configurable.
  - make the binaries FIPS-compatible by default.

- state.SetAdminToken(adminToken) // This is temporary, for demo. Update it based on new sequence diagrams.
- adminToken := req.Data // admin token will be auto created, we just need a strong password, and sanitize that password

- use a structured logger with log levels.

- Missing Endpoints to Implement
  - app/keeper/internal/route/keep.go

- BUG: Re-initing after failed initialization return success.
  aegis@aegis:~/Desktop/WORKSPACE/spike$ spike init
  Failed to save admin token:
  failed to save token to nexus
  Post "https://localhost:8553/v1/init": dial tcp 127.0.0.1:8553: connect: connection refused.
  post: Problem connecting to peer
  aegis@aegis:~/Desktop/WORKSPACE/spike$ spike init
  SPIKE is already initialized.
  Nothing to do.

- BUG: SPIKE Nexus display "http connection closed" warnings.

- Immediate Backlog
  - Record a demo.
  - Fix visible bugs.
  - Refactor reqres entities to one level higher.
  - Source code cleanup.
  - generate some sequence diagrams before it's too late.
  - Create a documentation website.
  - Have a way to clean up outdated session tokens to avoid memory leaks.

- Feat: Soft Deletes
  POST /v1/secrets?action=delete

- Feat: Undelete (versions)

- Feat: List
  POST /v1/secrets

- SPIKE Nexus Sanity Tests
  - Ensure SPIKE Nexus caches the root key in memory.
  - Ensure SPIKE Nexus reads from SPIKE keep if it does not have the root key.
  - Ensure SPIKE Nexus saves the encrypted root key to the database.
  - Ensure SPIKE Nexus caches the user's session key.
  - Ensure SPIKE Nexus removes outdated session keys.
  - Ensure SPIKE Nexus does not re-init (without manual intervention) after
    being initialized.
  - Ensure SPIKE Nexus adheres to the bootstrapping sequence diagram.
  - Ensure SPIKE Nexus backs up the admin token by encrypting it with the root
    key and storing in the database.
  - Ensure SPIKE Nexus stores the initialization tombstone in the database.

- SPIKE Pilot Sanity Tests
  - Ensure SPIKE Pilot denies any operation if SPIKE Nexus is not initialized.
  - Ensure SPIKE Pilot can warn if SPIKE Nexus is unreachable
  - Ensure SPIKE Pilot does not indefinitely hang up if SPIRE is not there.
  - Ensure SPIKE Pilot can get and set a secret.
  - Ensure SPIKE Pilot can do a force reset.
  - Ensure SPIKE Pilot can recover the root password.
  - Ensure that after `spike init` you have a password-encrypted root key in the db.
  - Ensure that you can recover the password-encrypted root key.

- SPIKE Keep Sanity Tests
  - Ensure that the root key is stored in SPIKE Keep's memory.
  - Ensure that SPIKE Keep can return the root key back to SPIKE Nexus.

---------------------- AFTER THIS POINT IS FAR FUTURE --------------------------

Our goal is to have a minimally delightful product before adding more features.
Anything that comes after the line above shall be done when everything (or
the majority of things, at least) have been completed above already.

- Ability to rotate the root key (automatic via Nexus).
- Ability to rotate the admin token (manual).
- Admin tokens can expire.
- Encourage to create users for auditing instead of relying on the s

- Security Measures (SPIKE Nexus)
  - Encrypting the root key with admin password is good
    Consider adding salt to the password encryption
  - Maybe add a key rotation mechanism for the future
  - Error Handling
    - Good use of exponential retries
    - Consider adding specific error types/codes for different failure scenarios
    - Might want to add cleanup steps for partial initialization failures
  - Redundancy
    - Good that we cache the root key in Keeper
    - Consider adding a health check between Nexus and Keeper

- Unit tests and coverage reports.
- Integration tests.
- Test automation.
- Assigning secrets to SPIFFE IDs or SPIFFE ID prefixes.
- RW policies for workloads based on path and SPIFFE IDs.
- Secret metadata API.